#!/usr/bin/env node

const { spawn } = require('child_process');
const { createServer } = require('http');

// Âà©Áî®ÂèØËÉΩ„Å™„Éù„Éº„Éà„ÇíÊé¢„Åô
const findAvailablePort = async (startPort = 3001) => {
  for (let port = startPort; port < startPort + 100; port++) {
    try {
      await new Promise((resolve, reject) => {
        const server = createServer();
        server.once('error', reject);
        server.once('listening', () => {
          server.close();
          resolve();
        });
        server.listen(port);
      });
      return port;
    } catch (error) {
      // „Åì„ÅÆ„Éù„Éº„Éà„ÅØ‰ΩøÁî®‰∏≠
    }
  }
  throw new Error('Âà©Áî®ÂèØËÉΩ„Å™„Éù„Éº„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì');
};

const runE2ETests = async () => {
  console.log('üîç Âà©Áî®ÂèØËÉΩ„Å™„Éù„Éº„Éà„ÇíÊé¢„Åó„Å¶„ÅÑ„Åæ„Åô...');

  try {
    const port = await findAvailablePort();
    console.log(`‚úÖ „Éù„Éº„Éà ${port} „Çí‰ΩøÁî®„Åó„Åæ„Åô`);

    // Áí∞Â¢ÉÂ§âÊï∞„ÇíË®≠ÂÆö„Åó„Å¶E2E„ÉÜ„Çπ„Éà„ÇíÂÆüË°å
    const env = { ...process.env, PORT: port, CI: 'true' };
    const child = spawn('npm', ['run', 'test:e2e'], {
      env,
      stdio: 'inherit',
      shell: true,
    });

    child.on('close', (code) => {
      process.exit(code);
    });
  } catch (error) {
    console.error('‚ùå „Ç®„É©„Éº:', error.message);
    process.exit(1);
  }
};

runE2ETests();
