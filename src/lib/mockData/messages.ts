import { Message } from '@/components/chat/types'

interface ConversationMessages {
  conversationId: string
  messages: Message[]
}

export const mockMessages: ConversationMessages[] = [
  {
    conversationId: 'conv-1',
    messages: [
      {
        id: 'msg-1-1',
        role: 'user',
        content: 'こんにちは。エンジニアとしてキャリアを築きたいと考えているのですが、どこから始めればいいか悩んでいます。',
        timestamp: new Date('2024-01-15T09:00:00')
      },
      {
        id: 'msg-1-2',
        role: 'assistant',
        content: 'こんにちは！エンジニアとしてのキャリア構築をお考えなんですね。素晴らしい目標です！\n\nまず、いくつか質問させてください：\n\n1. **現在のスキルレベル**はどの程度でしょうか？\n2. **興味のある分野**（フロントエンド、バックエンド、AI/ML等）はありますか？\n3. **目標達成までの期間**はどのくらいを想定していますか？\n\nこれらの情報から、あなたに最適な学習プランを作成させていただきます。',
        timestamp: new Date('2024-01-15T09:02:00')
      },
      {
        id: 'msg-1-3',
        role: 'user',
        content: 'プログラミングは独学で少し触った程度です。フロントエンドに興味があって、できれば1年以内に転職したいと思っています。',
        timestamp: new Date('2024-01-15T09:05:00')
      },
      {
        id: 'msg-1-4',
        role: 'assistant',
        content: '**フロントエンドエンジニア転職**を1年以内に実現する計画ですね！\n\n以下のような段階的な学習プランを提案します：\n\n### 📚 第1段階（1-3ヶ月）: 基礎固め\n- HTML/CSS/JavaScript の基礎習得\n- Git/GitHubの使い方\n- 簡単なWebサイト制作\n\n### 🚀 第2段階（4-6ヶ月）: モダンフレームワーク\n- React.js の学習\n- TypeScriptの導入\n- 実践的なプロジェクト開発\n\n### 💼 第3段階（7-9ヶ月）: ポートフォリオ構築\n- 3-5個の完成度の高いプロジェクト\n- デプロイとホスティング\n- コード品質の向上\n\n### 🎯 第4段階（10-12ヶ月）: 転職活動\n- 技術面接対策\n- 企業研究と応募\n- 継続的な学習\n\nこのプランをベースに、具体的なプロジェクトとタスクを設定しましょうか？',
        timestamp: new Date('2024-01-15T09:08:00')
      },
      {
        id: 'msg-1-5',
        role: 'user',
        content: 'はい、ぜひお願いします！特に最初の3ヶ月で何をすべきか詳しく知りたいです。',
        timestamp: new Date('2024-01-15T09:10:00')
      },
      {
        id: 'msg-1-6',
        role: 'assistant',
        content: '最初の3ヶ月の詳細プランを作成しました：\n\n## 🗓️ 月別学習計画\n\n### 1ヶ月目: Web基礎マスター\n**週1-2**: HTML/CSS基礎\n- 毎日2時間: HTML要素とCSS基本プロパティ\n- 週末: レスポンシブデザイン課題\n\n**週3-4**: JavaScript入門\n- DOM操作、イベント処理\n- 簡単な対話型Webページ作成\n\n### 2ヶ月目: JavaScript深掘り\n**週1-2**: ES6+の機能\n- アロー関数、Promise、async/await\n- モジュールシステム\n\n**週3-4**: 実践プロジェクト\n- ToDoアプリ作成\n- 天気予報アプリ（API連携）\n\n### 3ヶ月目: 開発環境と実践\n**週1-2**: 開発ツール習得\n- Git/GitHub実践\n- VS Code効率化\n- npm/webpack基礎\n\n**週3-4**: ポートフォリオサイト\n- 自己紹介サイト構築\n- 作品展示ページ\n- GitHub Pages公開\n\n## 📝 毎日のルーティン提案\n- **朝30分**: 技術記事読書\n- **夜2時間**: ハンズオン学習\n- **週末4時間**: プロジェクト開発\n\nこのスケジュールで進めていけそうですか？',
        timestamp: new Date('2024-01-15T09:15:00')
      },
      {
        id: 'msg-1-7',
        role: 'user',
        content: '詳細なプランありがとうございます！朝の時間は取れそうですが、平日夜は仕事で疲れて2時間は難しいかもしれません...',
        timestamp: new Date('2024-01-15T09:18:00')
      },
      {
        id: 'msg-1-8',
        role: 'assistant',
        content: 'お仕事をしながらの学習は大変ですよね。**無理のない計画**に調整しましょう！\n\n## 🔄 調整版スケジュール\n\n### 平日のルーティン\n- **朝45分**: 集中学習タイム（最も効率的）\n- **昼休み15分**: 技術記事や動画視聴\n- **夜45分**: 軽めの復習や課題\n\n### 週末の活用\n- **土曜午前3時間**: 新しい内容の学習\n- **日曜午前2時間**: プロジェクト開発\n\n### 疲労対策の工夫\n1. **ポモドーロテクニック**: 25分集中→5分休憩\n2. **マイクロ学習**: 通勤時間にスマホで記事読み\n3. **週3日ルール**: 最低週3日は学習（完璧を求めない）\n\n### 進捗管理\n- 週次で振り返り、ペース調整\n- 小さな成功体験を積み重ねる\n- 体調優先で柔軟に対応\n\nこれなら続けられそうでしょうか？必要に応じてさらに調整も可能です！',
        timestamp: new Date('2024-01-15T09:22:00')
      },
      {
        id: 'msg-1-9',
        role: 'user',
        content: 'これなら続けられそうです！ところで、モチベーションが下がったときはどうすればいいでしょうか？',
        timestamp: new Date('2024-01-15T09:25:00')
      },
      {
        id: 'msg-1-10',
        role: 'assistant',
        content: 'モチベーション管理は長期学習の**最重要ポイント**ですね！以下の方法をお勧めします：\n\n## 💪 モチベーション維持の仕組み\n\n### 1. 見える化で達成感UP\n- **学習ログ**: GitHubの草を育てる\n- **進捗グラフ**: 週次の学習時間記録\n- **スキルマップ**: 習得技術をビジュアル化\n\n### 2. コミュニティの力\n- **#100DaysOfCode**: Twitter/Xで学習記録\n- **もくもく会**: オンライン/オフライン参加\n- **メンター**: 経験者に相談できる環境\n\n### 3. 小さな成功体験\n- **週次ミニプロジェクト**: 完成の喜び\n- **他者への教え**: Qiita記事投稿\n- **称賛の仕組み**: 家族友人に見せる\n\n### 4. 休息とリフレッシュ\n- **計画的な休み**: 週1完全オフ\n- **趣味時間確保**: プログラミング以外も大切\n- **体調管理**: 運動・睡眠・食事\n\n### 5. 「なぜ」を忘れない\n- **目標の可視化**: 理想の働き方を画像で\n- **月次振り返り**: 初心を思い出す\n- **小さな変化**: できることが増えた実感\n\nどの方法が特に効きそうですか？あなたに合った方法を一緒に見つけていきましょう！',
        timestamp: new Date('2024-01-15T09:30:00')
      },
      {
        id: 'msg-1-11',
        role: 'user',
        content: 'GitHubの草を育てるのと、週次ミニプロジェクトが面白そうです！最初のミニプロジェクトは何がおすすめですか？',
        timestamp: new Date('2024-01-15T09:35:00')
      },
      {
        id: 'msg-1-12',
        role: 'assistant',
        content: '素晴らしい選択です！GitHubの草とミニプロジェクトの組み合わせは**最強の習慣化ツール**になりますよ！\n\n## 🌱 最初の4週間のミニプロジェクト\n\n### Week 1: 自己紹介カード\n```html\n<!-- シンプルだけど見栄えする -->\n<div class="profile-card">\n  <img src="avatar.jpg">\n  <h2>あなたの名前</h2>\n  <p>未来のフロントエンドエンジニア</p>\n</div>\n```\n**学習ポイント**: HTML構造、CSS装飾、Flexbox\n\n### Week 2: カウントダウンタイマー\n- 転職目標日までのカウントダウン\n- スタート/ストップ/リセット機能\n**学習ポイント**: JavaScript基礎、DOM操作、setInterval\n\n### Week 3: 今日の天気カード\n- 天気APIから情報取得\n- アイコンで天気表示\n**学習ポイント**: fetch API、非同期処理、エラーハンドリング\n\n### Week 4: 学習進捗トラッカー\n- 学習時間の記録と表示\n- localStorage保存\n**学習ポイント**: データ保存、Chart.js導入\n\n## 📊 GitHub活用のコツ\n1. **毎日1コミット**: 小さな変更でもOK\n2. **README充実**: プロジェクト説明を丁寧に\n3. **Issues活用**: TODOリストとして使用\n4. **ブランチ練習**: feature/fix等の使い分け\n\n最初は「自己紹介カード」から始めてみませんか？1週間後には緑の草が生え始めているはずです！🌿',
        timestamp: new Date('2024-01-15T09:45:00')
      }
    ]
  },
  {
    conversationId: 'conv-2',
    messages: [
      {
        id: 'msg-2-1',
        role: 'user',
        content: '昨日相談した学習プランの中で、Reactの学習プロジェクトを具体的に作りたいです。どんな構成にすればいいでしょうか？',
        timestamp: new Date('2024-01-16T14:00:00')
      },
      {
        id: 'msg-2-2',
        role: 'assistant',
        content: 'React学習プロジェクトの具体化ですね！**実践的で段階的な**プロジェクト構成を提案します。\n\n## 📋 React学習プロジェクト: タスク管理アプリ\n\n### プロジェクト選定理由\n- ✅ CRUD操作の全てを学べる\n- ✅ 状態管理の基礎を理解できる  \n- ✅ 実用的で拡張しやすい\n- ✅ ポートフォリオに最適\n\n### 段階的な実装計画\n\n**Phase 1: 基本機能（1週目）**\n```javascript\n// コンポーネント構成\n├── App.js\n├── components/\n│   ├── TaskList.js\n│   ├── TaskItem.js\n│   └── AddTask.js\n```\n- タスクの表示\n- タスクの追加\n- 基本的なスタイリング\n\n**Phase 2: 状態管理（2週目）**\n- タスクの完了/未完了切り替え\n- タスクの削除機能\n- useStateとpropsの理解\n\n**Phase 3: 高度な機能（3週目）**\n- タスクの編集機能\n- フィルタリング（全て/完了/未完了）\n- ローカルストレージ保存\n\n**Phase 4: 見た目の改善（4週目）**\n- アニメーション追加\n- レスポンシブ対応\n- ダークモード実装\n\nこの構成で進めていきましょうか？最初のPhase 1の詳細な実装手順もお伝えできます！',
        timestamp: new Date('2024-01-16T14:03:00')
      },
      {
        id: 'msg-2-3',
        role: 'user',
        content: 'いいですね！Phase 1の実装手順を教えてください。特につまずきやすいポイントも知りたいです。',
        timestamp: new Date('2024-01-16T14:05:00')
      },
      {
        id: 'msg-2-4',
        role: 'assistant',
        content: '## 🚀 Phase 1: 基本機能の実装ガイド\n\n### Step 1: プロジェクトセットアップ（30分）\n```bash\n# プロジェクト作成\nnpx create-react-app task-manager\ncd task-manager\nnpm start\n```\n\n### Step 2: コンポーネント作成（1時間）\n\n**App.js - メインコンポーネント**\n```javascript\nfunction App() {\n  const [tasks, setTasks] = useState([\n    { id: 1, text: "Reactを学ぶ", completed: false },\n    { id: 2, text: "アプリを作る", completed: false }\n  ]);\n\n  return (\n    <div className="app">\n      <h1>タスク管理アプリ</h1>\n      <AddTask />\n      <TaskList tasks={tasks} />\n    </div>\n  );\n}\n```\n\n### ⚠️ つまずきポイントと対策\n\n**1. stateの更新方法**\n```javascript\n// ❌ よくある間違い\ntasks.push(newTask); // 直接変更はNG\n\n// ✅ 正しい方法\nsetTasks([...tasks, newTask]); // 新しい配列を作成\n```\n\n**2. keyプロパティの忘れ**\n```javascript\n// ❌ Warningが出る\ntasks.map(task => <TaskItem task={task} />)\n\n// ✅ 一意のkeyを設定\ntasks.map(task => <TaskItem key={task.id} task={task} />)\n```\n\n**3. イベントハンドラの書き方**\n```javascript\n// ❌ 即座に実行されてしまう\n<button onClick={handleClick()}>追加</button>\n\n// ✅ 関数を渡す\n<button onClick={handleClick}>追加</button>\n// または\n<button onClick={() => handleClick()}>追加</button>\n```\n\n### Step 3: 動作確認チェックリスト\n- [ ] タスク一覧が表示される\n- [ ] 入力フォームが表示される\n- [ ] Consoleにエラーが出ていない\n- [ ] React Developer Toolsで状態を確認\n\nつまずいたらすぐに質問してください！一緒に解決しましょう💪',
        timestamp: new Date('2024-01-16T14:10:00')
      },
      {
        id: 'msg-2-5',
        role: 'user',
        content: 'stateの更新でよく間違えそうです。配列やオブジェクトの場合の正しい更新パターンをもっと詳しく教えてもらえますか？',
        timestamp: new Date('2024-01-16T14:15:00')
      },
      {
        id: 'msg-2-6',
        role: 'assistant',
        content: '## 📚 React State更新の完全ガイド\n\nstateの**イミュータブルな更新**は最重要概念です！詳しく解説します。\n\n### 🔧 配列の更新パターン\n\n```javascript\nconst [tasks, setTasks] = useState([]);\n\n// 1️⃣ 追加\n// ❌ NG: 破壊的メソッド\ntasks.push(newTask);\nsetTasks(tasks);\n\n// ✅ OK: 新しい配列を作成\nsetTasks([...tasks, newTask]); // 末尾に追加\nsetTasks([newTask, ...tasks]); // 先頭に追加\n\n// 2️⃣ 削除\n// ✅ filterで新配列作成\nsetTasks(tasks.filter(task => task.id !== targetId));\n\n// 3️⃣ 更新\n// ✅ mapで新配列作成\nsetTasks(tasks.map(task => \n  task.id === targetId \n    ? { ...task, completed: true } \n    : task\n));\n\n// 4️⃣ 並び替え\n// ✅ スプレッド構文で配列をコピーしてからソート\nsetTasks([...tasks].sort((a, b) => a.priority - b.priority));\n```\n\n### 🔧 オブジェクトの更新パターン\n\n```javascript\nconst [user, setUser] = useState({\n  name: "太郎",\n  age: 25,\n  skills: ["HTML", "CSS"]\n});\n\n// 1️⃣ プロパティの更新\n// ❌ NG: 直接変更\nuser.age = 26;\nsetUser(user);\n\n// ✅ OK: スプレッド構文で新オブジェクト\nsetUser({\n  ...user,\n  age: 26\n});\n\n// 2️⃣ ネストしたプロパティの更新\n// ✅ 深い階層も新しく作成\nsetUser({\n  ...user,\n  profile: {\n    ...user.profile,\n    bio: "新しい自己紹介"\n  }\n});\n\n// 3️⃣ 配列プロパティの更新\n// ✅ 配列も新しく作成\nsetUser({\n  ...user,\n  skills: [...user.skills, "JavaScript"]\n});\n```\n\n### 💡 なぜイミュータブルが重要？\n\n1. **Reactが変更を検知できる**\n   - 参照が変わることで再レンダリング\n   \n2. **予期しないバグを防ぐ**\n   - 他の場所で使われているデータを壊さない\n\n3. **デバッグが簡単**\n   - 状態の履歴を追跡できる\n\n### 🛠️ 便利な実装テクニック\n\n```javascript\n// 関数で更新（前の状態を確実に参照）\nsetTasks(prevTasks => [...prevTasks, newTask]);\n\n// 複数の更新を一度に\nsetTasks(prevTasks => {\n  const updated = prevTasks.filter(t => t.id !== deleteId);\n  return [...updated, newTask];\n});\n```\n\nこれらのパターンを意識すれば、stateのバグはほぼ防げます！実装で迷ったら具体的なコードと一緒に質問してくださいね。',
        timestamp: new Date('2024-01-16T14:20:00')
      },
      {
        id: 'msg-2-7',
        role: 'user',
        content: 'とても分かりやすいです！あと、Phase 1が終わったら、どうやって自分の理解度を確認すればいいでしょうか？',
        timestamp: new Date('2024-01-16T14:25:00')
      },
      {
        id: 'msg-2-8',
        role: 'assistant',
        content: '## ✅ Phase 1 理解度チェックリスト\n\n理解度の**客観的な確認**は成長に不可欠です！以下のチェックリストを用意しました。\n\n### 📝 セルフチェック項目\n\n**基本概念の理解（各2点）**\n- [ ] コンポーネントとは何か説明できる\n- [ ] propsの役割を説明できる\n- [ ] stateとpropsの違いを説明できる\n- [ ] JSXの特徴を3つ以上挙げられる\n- [ ] 仮想DOMの利点を簡単に説明できる\n\n**実装スキル（各3点）**\n- [ ] 新しいコンポーネントを1から作成できる\n- [ ] 親から子へデータを渡せる\n- [ ] イベントハンドラを正しく設定できる\n- [ ] stateを使って画面を更新できる\n- [ ] map関数でリストを表示できる\n\n**トラブルシューティング（各2点）**\n- [ ] Consoleのエラーメッセージを理解できる\n- [ ] React Developer Toolsを使える\n- [ ] よくあるWarningの原因が分かる\n\n### 🎯 実力確認ミニ課題\n\n**30分チャレンジ**: 以下を実装してみましょう\n1. カウンターアプリ（+1/-1/リセットボタン）\n2. 入力した文字をリアルタイム表示\n3. チェックボックスで表示/非表示切り替え\n\n### 📊 スコア判定\n- **25点以上**: 素晴らしい！Phase 2へ\n- **20-24点**: もう少し！苦手な部分を復習\n- **19点以下**: Phase 1をもう1週間\n\n### 🔍 理解を深める質問\n\n自分に問いかけてみてください：\n1. 「なぜReactはコンポーネント単位で考えるの？」\n2. 「stateを直接変更してはいけない理由は？」\n3. 「このアプリをVanilla JSで書いたらどうなる？」\n\n### 💪 次のステップ\n\n理解度に応じて：\n- **自信あり** → Phase 2でuseEffectに挑戦\n- **まあまあ** → Phase 1.5として小さな機能追加\n- **不安** → 基礎の動画教材で補強\n\nどの項目で詰まっているか教えていただければ、ピンポイントでサポートします！',
        timestamp: new Date('2024-01-16T14:30:00')
      }
    ]
  },
  {
    conversationId: 'conv-3',
    messages: [
      {
        id: 'msg-3-1',
        role: 'user',
        content: '体調が悪くて、今日予定していた学習ができそうにありません。スケジュールをどう調整すればいいでしょうか？',
        timestamp: new Date('2024-01-20T08:00:00')
      },
      {
        id: 'msg-3-2',
        role: 'assistant',
        content: '体調が優れないとのこと、まずは**お大事になさってください**。健康が最優先です。\n\n## 🏥 体調不良時のスケジュール調整案\n\n### 今日の対応\n1. **完全休養を推奨**\n   - 学習は一旦忘れて、しっかり休む\n   - 罪悪感を持つ必要はありません\n\n2. **最小限の記録だけ**\n   - 体調不良をログに記録（後の振り返り用）\n   - GitHubの草は気にしない\n\n### 📅 リカバリープラン\n\n**軽症の場合（1-2日で回復）**\n- 今週の重要タスクを洗い出し\n- 週末に30分だけ追加学習\n- 来週に少しずつ分散\n\n**重症の場合（3日以上）**\n- 今週は最小限の目標に変更\n- 優先度の低いタスクは翌週へ\n- 完全回復後にペース調整\n\n### 優先度の見直し\n\n現在のタスクを教えていただければ、以下の基準で整理します：\n- 🔴 **必須**: 締切があるもの\n- 🟡 **重要**: スキルの基礎部分\n- 🟢 **調整可**: 発展的な内容\n\n体調はいかがですか？現在進行中のタスクを教えていただければ、具体的な調整案を作成します。',
        timestamp: new Date('2024-01-20T08:05:00')
      },
      {
        id: 'msg-3-3',
        role: 'user',
        content: '熱はないけど頭痛がひどくて...今週はReactのPhase 2を進める予定で、あとCSS設計の本も読もうと思っていました。',
        timestamp: new Date('2024-01-20T08:08:00')
      },
      {
        id: 'msg-3-4',
        role: 'assistant',
        content: '頭痛がひどいのはつらいですね。画面を見続けるのも負担になりますから、無理は禁物です。\n\n## 🔄 今週の調整プラン\n\n### 優先度の再設定\n\n**🔴 最優先（体調回復後すぐ）**\n- React Phase 2の「状態管理」部分のみ\n  - 削除機能の実装（コア機能）\n  - 完了/未完了の切り替え\n\n**🟡 次点（余裕があれば）**\n- useStateの理解を深める部分\n\n**🟢 延期してOK**\n- CSS設計の本 → 来週へ\n- React Phase 2の装飾部分 → 再来週へ\n\n### 📊 具体的なスケジュール案\n\n```\n月曜（今日）: 完全休養\n火曜: 体調確認 → 良ければ30分だけコード確認\n水曜: Phase 2の削除機能（1時間以内）\n木曜: 完了/未完了機能（1時間以内）  \n金曜: 調整日（遅れがあれば）\n週末: 体調次第で通常ペースへ\n```\n\n### 💡 頭痛時の学習テクニック\n\n回復期に使える方法：\n- **音声学習**: ポッドキャストや動画（画面を見ない）\n- **紙とペン**: アイデア整理やフロー図\n- **短時間集中**: 15分作業→15分休憩\n\n### 🎯 最小目標\n\n今週これだけできればOK：\n- タスクの削除機能が動く\n- 体調の完全回復\n\n**進捗 ＜ 健康** です。焦らずいきましょう！',
        timestamp: new Date('2024-01-20T08:12:00')
      },
      {
        id: 'msg-3-5',
        role: 'user',
        content: 'ありがとうございます。最小目標なら達成できそうな気がします。でも、遅れを取り戻すのが不安です...',
        timestamp: new Date('2024-01-20T08:15:00')
      },
      {
        id: 'msg-3-6',
        role: 'assistant',
        content: '**遅れへの不安**、とてもよく分かります。でも大丈夫、一緒に現実的な視点で考えてみましょう。\n\n## 🌟 「遅れ」の捉え方を変える\n\n### 学習は直線ではない\n```\n理想: ━━━━━━━━━━━━→\n現実: ～～∩～～∪～～↗️\n      (波があって当然！)\n```\n\n### 📈 長期視点で見ると\n\n**1年後の目標から逆算**\n- 365日中、体調不良: 約10-15日は想定内\n- 週単位の遅れ: 年間計画では誤差範囲\n- むしろ**継続できることが成功の鍵**\n\n### 💪 遅れを味方にする\n\n1. **復習の機会として活用**\n   - Phase 1の理解が深まる\n   - 基礎が固まって後が楽に\n\n2. **ペース調整の練習**\n   - 完璧主義から脱却\n   - 柔軟性が身につく\n\n3. **メンタル強化**\n   - 挫折からの回復力UP\n   - 現実的な計画力向上\n\n### 🔧 遅れを最小化する工夫\n\n**Buffer（余裕）の設定**\n- 月間計画に「調整週」を入れる\n- 週3日できればOKルール\n- 体調不良想定済みの計画\n\n### 😊 今のあなたの強み\n\n- 体調不良でも学習意欲がある\n- 最小目標を受け入れる柔軟性\n- 助けを求められる素直さ\n\nこれらは**エンジニアとして大切な資質**です。\n\n「遅れ」ではなく「適切なペース調整」と考えてみてください。マラソンと同じで、ゴールすることが大切です！🏃‍♂️',
        timestamp: new Date('2024-01-20T08:20:00')
      }
    ]
  },
  {
    conversationId: 'conv-4',
    messages: [
      {
        id: 'msg-4-1',
        role: 'user',
        content: '今週の学習を振り返りたいです。React Phase1は完了しましたが、予定より時間がかかってしまいました。',
        timestamp: new Date('2024-01-21T19:00:00')
      },
      {
        id: 'msg-4-2',
        role: 'assistant',
        content: 'Phase 1完了おめでとうございます！🎉 予定より時間がかかったとのことですが、**完了したこと自体が素晴らしい成果**です。\n\n一緒に振り返りをしてみましょう。\n\n## 📊 週次レビューフレームワーク\n\n### 1. 達成したこと（Facts）\n教えていただけますか？\n- 作成したコンポーネント数は？\n- 新しく理解した概念は？\n- 一番うまくいった部分は？\n\n### 2. 時間分析（Time）\n- 予定: 何時間\n- 実際: 何時間\n- 差分: どこで時間がかかった？\n\n### 3. 感情面（Feelings）\n- 楽しかった瞬間\n- つらかった瞬間\n- モチベーションの変化\n\n詳しく教えていただければ、より具体的な改善案を提案できます！',
        timestamp: new Date('2024-01-21T19:02:00')
      },
      {
        id: 'msg-4-3',
        role: 'user',
        content: '予定は15時間でしたが、実際は20時間かかりました。特にstateの理解とデバッグに時間を取られました。でも、最後にアプリが動いた時はすごく嬉しかったです！',
        timestamp: new Date('2024-01-21T19:05:00')
      },
      {
        id: 'msg-4-4',
        role: 'assistant',
        content: '**アプリが動いた時の喜び**、その気持ちがエンジニアリングの醍醐味ですね！😊\n\n## 📈 振り返り分析\n\n### 時間配分の内訳\n- 予定: 15時間 → 実際: 20時間（**+33%**）\n- 初学者としては**とても健全な誤差**です\n\n### 🔍 時間がかかった要因分析\n\n**State理解に時間がかかった理由**\n- ✅ 正常: 最重要概念なので時間をかけて正解\n- ✅ 深い理解: 表面的でなく本質を学んだ証拠\n- ✅ 将来への投資: Phase 2以降がスムーズに\n\n**デバッグ時間**\n- 💡 プロも時間の30-50%はデバッグ\n- 💡 エラーと向き合えたのは成長の証\n\n### 📊 見えてきた成長\n\n```javascript\n// 1週間前のあなた\nconst skills = ["HTML", "CSS", "JS基礎"];\n\n// 今のあなた  \nconst skills = [\n  ...previous,\n  "React基礎",\n  "コンポーネント思考",\n  "State管理",\n  "デバッグ力"\n];\n```\n\n### 🎯 Phase 2への改善案\n\n**1. 時間見積もりの調整**\n- 基準時間 × 1.3 = 現実的な見積もり\n- バッファ時間を最初から確保\n\n**2. デバッグ効率化**\n- エラーメッセージ集を作る\n- console.logの戦略的配置\n- React Developer Toolsの活用\n\n**3. State学習の定着**\n- 毎日5分、前日のコード見直し\n- 小さなサンプルで実験\n\n### ✨ 特に素晴らしかった点\n\n1. **20時間やり切った継続力**\n2. **難しい概念から逃げなかった**\n3. **完成の喜びを味わえた**\n\nこの調子でPhase 2も一緒に頑張りましょう！何か不安な点はありますか？',
        timestamp: new Date('2024-01-21T19:10:00')
      },
      {
        id: 'msg-4-5',
        role: 'user',
        content: 'エラーメッセージ集を作るのは良いアイデアですね！あと、Phase 2でuseEffectが出てくると聞いて少し不安です。',
        timestamp: new Date('2024-01-21T19:15:00')
      },
      {
        id: 'msg-4-6',
        role: 'assistant',
        content: '**useEffectへの不安**、正直な気持ちを共有していただいてありがとうございます。実は多くの人が同じ不安を持つポイントなんです。\n\n## 🎯 useEffect攻略ガイド\n\n### なぜ難しく感じるのか\n1. **タイミングの概念**が新しい\n2. **副作用**という用語が抽象的\n3. **依存配列**のルールが複雑そう\n\n### 📚 段階的な理解アプローチ\n\n**Step 1: 日常生活で例える**\n```javascript\n// useEffectは「きっかけで動く処理」\n\n// 例：部屋に入ったら電気をつける\nuseEffect(() => {\n  電気をつける();\n}, [部屋に入った]);\n\n// 例：気温が変わったらエアコン調整\nuseEffect(() => {\n  エアコン温度を調整();\n}, [気温]);\n```\n\n**Step 2: 最もシンプルな使い方から**\n```javascript\n// 1. コンポーネント表示時に1回だけ\nuseEffect(() => {\n  console.log("こんにちは！");\n}, []); // 空配列 = 1回だけ\n\n// 2. 特定の値が変わったら実行\nuseEffect(() => {\n  console.log(`カウント: ${count}`);\n}, [count]); // countが変わるたび\n```\n\n### 🛡️ エラーメッセージ集の始め方\n\n**Notionやメモ帳に記録**\n```markdown\n## React エラー集\n\n### 1. "Cannot read property of undefined"\n**原因**: オブジェクトが存在しない\n**解決**: オプショナルチェイン(?.)を使う\n**例**: user?.name\n\n### 2. "Too many re-renders"\n**原因**: 無限ループ\n**解決**: useEffectの依存配列を確認\n```\n\n### 💡 Phase 2を楽にする準備\n\n**今週できること**\n1. [React公式のuseEffect解説](https://react.dev/learn/synchronizing-with-effects)を軽く眺める（理解しなくてOK）\n2. YouTubeで「useEffect 初心者」検索して雰囲気を掴む\n3. Phase 1のコードを完璧に理解（基礎が大事）\n\n### 🤝 安心材料\n\n- useEffectは最初は2-3パターンしか使わない\n- 間違えてもアプリは壊れない（エラーが出るだけ）\n- 私がステップバイステップでサポートします\n\n**「分からない」は成長の始まり**です。不安なまま始めて、一緒に解決していきましょう！',
        timestamp: new Date('2024-01-21T19:20:00')
      },
      {
        id: 'msg-4-7',
        role: 'user',
        content: '日常生活の例えがとても分かりやすいです！エラー集も早速作ってみます。ところで、学習のモチベーションを保つために他の人とつながる方法はありますか？',
        timestamp: new Date('2024-01-21T19:25:00')
      },
      {
        id: 'msg-4-8',
        role: 'assistant',
        content: '素晴らしい質問です！**仲間との繋がり**は、独学の孤独を乗り越える最強の武器になります。\n\n## 🤝 エンジニアコミュニティ活用ガイド\n\n### 📱 オンラインコミュニティ\n\n**1. Twitter/X #駆け出しエンジニア**\n```\n投稿例：\n「React Phase1完了！🎉\nStateの理解に20時間かかったけど、\nアプリが動いた瞬間の喜びは格別でした\n\n#駆け出しエンジニア #React学習 #今日の積み上げ」\n```\n\n**2. Zenn/Qiitaで学習ログ**\n- 週次振り返りを記事化\n- エラー解決方法を共有\n- 初心者目線が貴重なコンテンツに\n\n**3. Discord/Slackコミュニティ**\n- 「フロントエンドもくもく会」\n- 「React初心者の会」\n- リアルタイムで質問できる\n\n### 🏃 参加しやすいイベント\n\n**オンラインもくもく会**\n- 土曜朝の定期開催が多い\n- カメラOFF/ミュートOKが大半\n- 作業後の成果共有が励みに\n\n**LT（ライトニングトーク）会**\n- 5分で学習体験を発表\n- 「初心者がReactで詰まった話」など\n- 共感を得やすい\n\n### 💪 繋がりを作るコツ\n\n**Give First精神**\n1. 他の人の投稿にいいね/リプライ\n2. 誰かの質問に答えてみる\n3. 自分の失敗談をシェア\n\n**具体的なアクション**\n```\n月曜: #今日の積み上げ 投稿\n水曜: 誰かの技術記事にコメント\n金曜: 週の振り返りをツイート\n土曜: もくもく会参加\n```\n\n### 🎯 最初の一歩\n\n**今すぐできること**\n1. Twitterで「#駆け出しエンジニア React」検索\n2. 共感できる人を3人フォロー\n3. 今日の学習成果を1ツイート\n\n### ⚠️ 注意点\n\n- 他人と比較しない（ペースは人それぞれ）\n- ネガティブな人からは距離を置く\n- 「教えてください」より「一緒に頑張りましょう」\n\n**あなたの「20時間かけてState理解した」経験は、同じ悩みを持つ人の希望になります**。ぜひシェアしてみてください！\n\nどのコミュニティから始めてみたいですか？',
        timestamp: new Date('2024-01-21T19:30:00')
      },
      {
        id: 'msg-4-9',
        role: 'user',
        content: 'Twitterから始めてみようと思います！今日の振り返りを投稿してみます。最後に、来週のPhase 2の目標設定を手伝ってもらえますか？',
        timestamp: new Date('2024-01-21T19:35:00')
      },
      {
        id: 'msg-4-10',
        role: 'assistant',
        content: 'Twitter投稿、素晴らしい一歩です！🐦 きっと共感してくれる仲間が見つかりますよ。\n\n## 📋 Phase 2 週間目標設定\n\n### 🎯 現実的な目標設定\n\n**学習時間の見積もり**\n- Phase 1実績: 20時間\n- Phase 2予測: 15時間 × 1.3 = **約20時間**\n- 週の配分: 平日2時間 × 5 + 週末5時間 × 2 = 20時間\n\n### 📌 必達目標（MUST）\n\n1. **タスクの削除機能**\n   - フィルターで削除ボタン表示\n   - クリックで配列から削除\n   - 確認ダイアログ追加\n\n2. **完了/未完了の切り替え**\n   - チェックボックス実装\n   - 打ち消し線のスタイル\n   - 完了数のカウント表示\n\n### 🌟 挑戦目標（WANT）\n\n3. **フィルタリング機能**\n   - 全て/完了/未完了の切り替え\n   - タブUIの実装\n\n4. **LocalStorage保存**\n   - useEffectでデータ永続化\n   - リロード後も保持\n\n### 📅 日別スケジュール案\n\n```\n月: 削除機能の設計・実装（2h）\n火: 削除機能のデバッグ（2h）\n水: 完了機能の実装（2h）\n木: スタイリング調整（2h）\n金: 振り返り・調整日（2h）\n土: フィルタリング挑戦（5h）
日: LocalStorage or 予備日（5h）\n```\n\n### 💡 効率化のポイント\n\n**事前準備チェックリスト**\n- [ ] Phase 1のコード整理\n- [ ] エラー集の準備\n- [ ] 参考記事をブックマーク\n\n**デバッグ時短テク**\n```javascript\n// デバッグ用のログを仕込む\nconst deleteTask = (id) => {\n  console.log('削除前:', tasks);\n  console.log('削除ID:', id);\n  // 処理\n  console.log('削除後:', newTasks);\n};\n```\n\n### 🏁 成功指標\n\n**定量的**\n- 削除機能: 動作する\n- 完了機能: 動作する\n- エラー: 0件\n- Twitter投稿: 週3回以上\n\n**定性的**\n- コードの意味を説明できる\n- 他の人に教えられる自信\n- 楽しんで開発できた\n\n### 📝 週次振り返りの約束\n\n来週の日曜19時、また一緒に振り返りましょう！\nその時に：\n- うまくいったこと\n- 困ったこと\n- Twitterでの反応\n- Phase 3への意気込み\n\nこの目標設定でPhase 2に挑戦できそうですか？調整したい部分があれば遠慮なく！',
        timestamp: new Date('2024-01-21T19:40:00')
      }
    ]
  },
  {
    conversationId: 'conv-5',
    messages: [
      {
        id: 'msg-5-1',
        role: 'user',
        content: '朝活を始めたいんですが、早起きが苦手で...プログラミング学習を朝にシフトするコツはありますか？',
        timestamp: new Date('2024-01-22T06:00:00')
      },
      {
        id: 'msg-5-2',
        role: 'assistant',
        content: '朝活への挑戦、素晴らしいですね！☀️ 実は**朝の学習は夜の2倍効率的**と言われています。一緒に無理なく始める方法を考えましょう。\n\n## 🌅 朝活プログラミングの段階的導入\n\n### 現状確認\nまず教えてください：\n- 現在の起床時間は？\n- 理想の起床時間は？\n- 夜は何時に寝ていますか？\n- 朝一番にやることは？\n\nこの情報から、あなたに最適な朝活プランを設計します！',
        timestamp: new Date('2024-01-22T06:02:00')
      },
      {
        id: 'msg-5-3',
        role: 'user',
        content: '今は7時起床で、できれば5時半に起きたいです。寝るのは大体23時半頃。朝はギリギリまで寝て、急いで準備して出社してます...',
        timestamp: new Date('2024-01-22T06:05:00')
      },
      {
        id: 'msg-5-4',
        role: 'assistant',
        content: '**90分早起き**は大きな変化ですね。一気には難しいので、**段階的なシフト**で成功率を上げましょう！\n\n## 📈 4週間で朝活エンジニアになる計画\n\n### 🚶 Week 1: 15分シフト（6:45起床）\n**目標**: 朝に「余裕」を作る\n```\n6:45 起床\n6:50 水を飲む・顔を洗う\n6:55 GitHubを開いて昨日のコード確認（5分）\n7:00 いつもの朝準備\n```\n\n### 🏃 Week 2: 30分シフト（6:30起床）\n**目標**: 朝にコードを書く習慣\n```\n6:30 起床\n6:35 コーヒー/お茶を準備\n6:40 簡単なコード修正やREADME更新（15分）\n6:55 朝準備\n```\n\n### 🚀 Week 3: 60分シフト（6:00起床）\n**目標**: 本格的な学習時間確保\n```\n6:00 起床\n6:05 軽いストレッチ\n6:10 集中学習タイム（30分）\n6:40 朝食\n6:55 準備\n```\n\n### ⭐ Week 4: 目標達成（5:30起床）\n**目標**: 理想の朝活ルーティン\n```\n5:30 起床\n5:35 準備運動（脳を起こす）\n5:40 Deep Work（50分集中）\n6:30 朝食・準備\n7:00 余裕を持って出発\n```\n\n## 💡 成功の仕組み作り\n\n### 前夜の準備\n- [ ] 23:00 スマホをベッドから離す\n- [ ] 朝のコード課題を決めておく\n- [ ] VSCodeを開いたまま寝る\n- [ ] 水とおやつを机に用意\n\n### 起床テクニック\n1. **アラーム2段階作戦**\n   - 1個目: 起床5分前（優しい音）\n   - 2個目: 起床時間（やる気が出る音楽）\n\n2. **光で起きる**\n   - カーテンを少し開けて寝る\n   - スマートライトで徐々に明るく\n\n3. **報酬システム**\n   - 起きたら好きな飲み物\n   - 1週間達成でご褒美\n\n### 🎯 朝活プログラミングのメリット\n\n- **脳がフレッシュ**: バグが見つけやすい\n- **邪魔されない**: 集中力MAX\n- **達成感でスタート**: 1日が充実\n- **定時後が自由**: 夜は休める\n\n### ⚠️ よくある失敗と対策\n\n**失敗**: 二度寝してしまう\n**対策**: ベッドから出て水を飲む動線\n\n**失敗**: 朝は頭が働かない\n**対策**: 最初は簡単なタスクから（README更新など）\n\n**失敗**: 継続できない\n**対策**: 週3日できればOKルール\n\n今週から15分シフトで始めてみませんか？月曜日の朝、どんなコードを触る予定にしましょうか？',
        timestamp: new Date('2024-01-22T06:10:00')
      },
      {
        id: 'msg-5-5',
        role: 'user',
        content: '段階的なプランいいですね！でも朝は本当に頭が働かなくて...最初の1週間は具体的に何をすればいいでしょうか？',
        timestamp: new Date('2024-01-22T06:15:00')
      },
      {
        id: 'msg-5-6',
        role: 'assistant',
        content: '朝の頭が働かない問題、すごくわかります！😅 **脳を優しく起こす**タスクから始めましょう。\n\n## 🧠 Week 1: 脳に優しい朝活メニュー\n\n### 月曜：コード読みの日\n```javascript\n// 昨日書いたコードを「音読」する\n// 例：「この関数は...タスクを...配列に追加している」\nconst addTask = (task) => {\n  setTasks([...tasks, task]);\n};\n```\n**効果**: 音読で脳が活性化\n\n### 火曜：コメント追加の日\n```javascript\n// 既存コードに日本語コメントを追加\nconst deleteTask = (id) => {\n  // ここに「指定されたIDのタスクを削除」と書く\n  setTasks(tasks.filter(task => task.id !== id));\n};\n```\n**効果**: 理解の整理\n\n### 水曜：変数名改善の日\n```javascript\n// Before\nconst x = tasks.length;\n\n// After（わかりやすい名前に変更）\nconst totalTaskCount = tasks.length;\n```\n**効果**: リファクタリング練習\n\n### 木曜：console.log探検の日\n```javascript\n// 気になる部分にログを追加して動作確認\nconsole.log('現在のタスク数:', tasks.length);\nconsole.log('最初のタスク:', tasks[0]);\n```\n**効果**: デバッグ力向上\n\n### 金曜：README更新の日\n```markdown\n## 今週学んだこと\n- StateのuseState使い方が分かった\n- 配列の操作はイミュータブルに\n- console.logは開発の友達\n```\n**効果**: 振り返り習慣\n\n## ☕ 朝の儀式（ルーティン）\n\n```\n1. 起きたら immediately 水を飲む（500ml）\n2. 顔を洗って深呼吸3回\n3. デスクに座ってVSCodeを開く\n4. 昨日のコードを10秒眺める\n5. 今日のタスクをこなす（5-10分）\n6. GitHub Commitして草を生やす🌱\n7. 「やった！」と心の中で叫ぶ\n```\n\n## 🎮 ゲーミフィケーション\n\n**朝活ポイントシステム**\n- 起床成功: +1pt\n- タスク完了: +2pt\n- Commit完了: +3pt\n- 5日連続: +10pt ボーナス\n\n**30pt貯まったら**: 好きな技術書を買う！\n\n## 💭 マインドセット\n\n- ❌ 「完璧にコードを書かなきゃ」\n- ✅ 「脳を起こすための準備運動」\n\n- ❌ 「新しい機能を実装しなきゃ」\n- ✅ 「昨日の自分より1行でも理解」\n\n## 📱 スマホアラームの設定例\n\n**6:40** 優しい音「もうすぐ朝活タイム♪」\n**6:45** 好きな曲「さあ、コードの時間だ！」\n\n月曜の朝、まずは「昨日のコード音読」から始めてみませんか？5分でOKです！',
        timestamp: new Date('2024-01-22T06:20:00')
      },
      {
        id: 'msg-5-7',
        role: 'user',
        content: 'コード音読面白そう！朝活ポイントシステムもモチベーション上がりそうです。ちなみに、朝活に失敗した日はどうすればいいですか？',
        timestamp: new Date('2024-01-22T06:23:00')
      },
      {
        id: 'msg-5-8',
        role: 'assistant',
        content: '**失敗を想定している**時点で、あなたは成功への道を歩んでいます！現実的で素晴らしい質問です。\n\n## 🔄 朝活失敗リカバリー戦略\n\n### 失敗パターン別対処法\n\n**パターン1: 寝坊した😴**\n```\n朝活 → ❌\n対策 → 昼休み5分コード or 帰宅後5分\n結果 → 「今日も学習した」✅\n```\n\n**パターン2: 起きたけどやる気ゼロ😑**\n```\n朝活 → VSCodeを開いて閉じるだけでOK\n記録 → 「起床は成功」+0.5pt\n結果 → 小さな成功体験✅\n```\n\n**パターン3: 体調不良🤒**\n```\n朝活 → 完全スキップ\n記録 → 「体調管理日」\n結果 → 罪悪感ゼロ、健康第一✅\n```\n\n## 📊 失敗を成功に変える仕組み\n\n### 週次成功率で考える\n```\n月 火 水 木 金\n○  ×  ○  ×  ○  = 60%成功 → 合格！🎉\n\n完璧主義: 5/5 = 100%必須 ❌\n現実主義: 3/5 = 60%でOK ✅\n```\n\n### 🎮 失敗ボーナスシステム\n\n**リカバリーポイント**\n- 寝坊後に昼学習: +1pt\n- 失敗を記録: +0.5pt\n- 翌日復活: +2pt\n- 失敗から学んだことをメモ: +1pt\n\n### 💡 失敗ログの活用\n\n```markdown\n## 朝活失敗ログ\n\n**1/23(月) 寝坊**\n原因: 日曜夜更かし\n対策: 日曜は22:30就寝\n学び: 休日の過ごし方が大事\n\n**1/26(木) やる気なし**\n原因: 前日の残業疲れ\n対策: 残業翌日は軽めタスク\n学び: 体調に合わせて柔軟に\n```\n\n### 🔧 失敗を減らす環境づくり\n\n**前日チェックリスト**\n- [ ] 明日の朝タスクは決めた？（簡単なもの）\n- [ ] アラームは2個セットした？\n- [ ] 水は枕元に置いた？\n- [ ] 23:30までに布団に入る？\n\n**失敗しやすい日の予測**\n- 飲み会の翌日 → 朝活は「VSCode開くだけ」\n- 金曜日 → 週の疲れで失敗率UP\n- 月曜日 → 週末のリズム崩れに注意\n\n### 😊 マインドリセット術\n\n**自分への声かけ**\n- ❌「また失敗した...」\n- ✅「失敗データが集まった！」\n\n- ❌「意志が弱い...」\n- ✅「人間らしくていい」\n\n- ❌「明日こそは...」\n- ✅「明日は別の作戦で」\n\n### 📈 長期視点の成功指標\n\n```\n1ヶ月目: 週3日できれば大成功\n2ヶ月目: 週4日が普通に\n3ヶ月目: 朝活が「当たり前」に\n```\n\n**Remember**: エンジニアは失敗から学ぶ職業です。朝活の失敗も貴重なデバッグ材料！\n\n今から「失敗ログ用ノート」を用意してみませんか？最初のページに「失敗は成功のもと」と書いて始めましょう！😄',
        timestamp: new Date('2024-01-22T06:25:00')
      }
    ]
  }
]

export function getMessagesByConversationId(conversationId: string): Message[] {
  const conversation = mockMessages.find(conv => conv.conversationId === conversationId)
  return conversation?.messages || []
}

export function getAllMessages(): Message[] {
  return mockMessages.flatMap(conv => conv.messages)
}

export function searchMessages(query: string): Message[] {
  const lowercaseQuery = query.toLowerCase()
  return getAllMessages().filter(message => 
    message.content.toLowerCase().includes(lowercaseQuery)
  )
}